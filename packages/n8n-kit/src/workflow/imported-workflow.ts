import type { Type } from "arktype";
import type { App } from "../app";
import { IMPORTED_WORKFLOW_SYMBOL } from "../symbols";
import { ResolvedWorkflow } from "./resolved-workflow";
import type { WorkflowProps } from "./workflow";

export interface ImportedWorkflowProps<Input extends Type, Output extends Type>
	extends Pick<
		WorkflowProps<Input, Output>,
		"inputSchema" | "outputSchema" | "name"
	> {
	/**
	 * Id of the workflow generated by n8n-kit (used in tags or visible in the CLI tables)
	 *
	 * Use this if you want the CLI to resolve the workflow id automatically
	 */
	hashId?: string;

	/**
	 * Id of the workflow in n8n
	 */
	n8nWorkflowId?: string;
}

export class ImportedWorkflow<
	Input extends Type = any,
	Output extends Type = any,
> extends ResolvedWorkflow {
	static readonly [IMPORTED_WORKFLOW_SYMBOL] = true;
	readonly [IMPORTED_WORKFLOW_SYMBOL] = true;

	public constructor(
		app: App,
		public readonly props: ImportedWorkflowProps<Input, Output>,
	) {
		super();

		if (!props.hashId && !props.n8nWorkflowId) {
			throw new Error("Either hashId or n8nWorkflowId must be provided");
		}

		this.setHashId(props.hashId!);
		this.setN8nWorkflowId(props.n8nWorkflowId!);

		app.add(this);
	}

	public getName() {
		return this.props.name ?? "Untitled";
	}
}
